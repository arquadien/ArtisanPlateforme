1. *Créer un modèle personnalisé* : Si vous n'avez pas encore créé de modèle pour gérer les utilisateurs, faites-le maintenant.

    bash
    php artisan make:model CustomUser -m
    

    Cela créera un modèle CustomUser et une migration associée.

2. *Configurer la migration* : Ouvrez la migration générée et ajoutez les colonnes nécessaires.

    php
    public function up()
    {
        Schema::create('custom_users', function (Blueprint $table) {
            $table->id();
            $table->string('phone')->unique();
            $table->string('password');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('custom_users');
    }
    

    Exécutez la migration pour créer la table :

    bash
    php artisan migrate
    

3. *Configurer le modèle CustomUser* : Ouvrez le fichier CustomUser.php et configurez-le comme suit :

    php
    namespace App\Models;

    use Illuminate\Foundation\Auth\User as Authenticatable;
    use Illuminate\Notifications\Notifiable;

    class CustomUser extends Authenticatable
    {
        use Notifiable;

        protected $fillable = [
            'phone',
            'password',
        ];

        protected $hidden = [
            'password',
            'remember_token',
        ];

        protected $casts = [
            'email_verified_at' => 'datetime',
        ];
    }
    

4. *Configurer le gardien d'authentification* : Dans le fichier config/auth.php, configurez le gardien (guard) pour utiliser le modèle CustomUser.

    php
    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'custom_users',
        ],

        'api' => [
            'driver' => 'token',
            'provider' => 'custom_users',
        ],
    ],

    'providers' => [
        'custom_users' => [
            'driver' => 'eloquent',
            'model' => App\Models\CustomUser::class,
        ],
    ],
    

5. *Modifier le contrôleur d'authentification* : Si vous avez un contrôleur d'authentification (par exemple, AuthController), modifiez-le pour utiliser phone et password.

    php
    namespace App\Http\Controllers\Auth;

    use App\Http\Controllers\Controller;
    use Illuminate\Http\Request;
    use Illuminate\Support\Facades\Auth;
    use App\Models\CustomUser;

    class AuthController extends Controller
    {
        public function login(Request $request)
        {
            $request->validate([
                'phone' => 'required|string',
                'password' => 'required|string',
            ]);

            $credentials = $request->only('phone', 'password');

            if (Auth::guard('web')->attempt($credentials)) {
                return redirect()->intended('dashboard');
            }

            return back()->withErrors([
                'phone' => 'The provided credentials do not match our records.',
            ]);
        }
    }
    

6. *Modifier les vues d'authentification* : Assurez-vous que vos formulaires de connexion et d'inscription incluent le champ phone.

    Exemple pour login.blade.php :

    html
    <form method="POST" action="{{ route('login') }}">
        @csrf

        <div class="form-group">
            <label for="phone">Phone</label>
            <input type="text" class="form-control" id="phone" name="phone" required>
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </form>
    

7. *Configurer les routes d'authentification* : Dans votre fichier routes/web.php, ajoutez les routes nécessaires.

    php
    use App\Http\Controllers\Auth\AuthController;

    Route::get('login', [AuthController::class, 'showLoginForm'])->name('login');
    Route::post('login', [AuthController::class, 'login']);
    